// <auto-generated />
using System;
using BasketballStats.Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BasketBallStats.Migrations;

[DbContext(typeof(EventsContext))]
[Migration("20220624213718_Initial")]
partial class Initial
{
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "6.0.5")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("ArenaTeam", b =>
            {
                b.Property<long>("ArenasId")
                    .HasColumnType("bigint");

                b.Property<long>("TeamsId")
                    .HasColumnType("bigint");

                b.HasKey("ArenasId", "TeamsId");

                b.HasIndex("TeamsId");

                b.ToTable("ArenaTeam");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Arena", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                b.Property<string>("Address")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("Varchar");

                b.Property<Guid>("ArenaId")
                    .HasColumnType("Uuid");

                b.Property<DateOnly>("Built")
                    .HasColumnType("date");

                b.Property<int>("Capacity")
                    .HasColumnType("Integer");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("Varchar");

                b.HasKey("Id");

                b.ToTable("Arenas");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Game", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                b.Property<Guid>("GameId")
                    .HasColumnType("Uuid");

                b.Property<DateTime>("GameTime")
                    .HasColumnType("TimestampTz");

                b.Property<Guid>("TeamAwayId")
                    .HasColumnType("Uuid");

                b.Property<Guid>("TeamHomeId")
                    .HasColumnType("Uuid");

                b.HasKey("Id");

                b.HasIndex("GameId");

                b.ToTable("Games");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.GameStatsReadModel", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                b.Property<short>("Blocks")
                    .HasColumnType("smallint");

                b.Property<short>("BlocksReceived")
                    .HasColumnType("smallint");

                b.Property<short>("DefensiveRebounds")
                    .HasColumnType("smallint");

                b.Property<short>("Fouls")
                    .HasColumnType("smallint");

                b.Property<short>("FoulsProvoked")
                    .HasColumnType("smallint");

                b.Property<Guid>("GameId")
                    .HasColumnType("Uuid");

                b.Property<short>("MadeFreeThrows")
                    .HasColumnType("smallint");

                b.Property<short>("MadeThreePoints")
                    .HasColumnType("smallint");

                b.Property<short>("MadeTwoPoints")
                    .HasColumnType("smallint");

                b.Property<short>("MissedFreeThrows")
                    .HasColumnType("smallint");

                b.Property<short>("MissedThreePoints")
                    .HasColumnType("smallint");

                b.Property<short>("MissedTwoPoints")
                    .HasColumnType("smallint");

                b.Property<short>("OffensiveRebounds")
                    .HasColumnType("smallint");

                b.Property<Guid>("PlayerId")
                    .HasColumnType("Uuid");

                b.Property<short>("Steals")
                    .HasColumnType("smallint");

                b.Property<Guid>("TeamId")
                    .HasColumnType("Uuid");

                b.Property<short>("Turnovers")
                    .HasColumnType("smallint");

                b.HasKey("Id");

                b.ToTable("ReadModelStatistics");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Player", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                b.Property<DateOnly>("BirthDate")
                    .HasColumnType("date");

                b.Property<short>("Height")
                    .HasColumnType("smallint");

                b.Property<string>("MiddleName")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Nationality")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<Guid>("PlayerId")
                    .HasColumnType("uuid");

                b.Property<string>("Surname")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<long>("TeamId")
                    .HasColumnType("bigint");

                b.Property<short>("Weight")
                    .HasColumnType("smallint");

                b.HasKey("Id");

                b.HasIndex("TeamId");

                b.ToTable("Players");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Stream", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TimestampTz");

                b.Property<string>("Data")
                    .IsRequired()
                    .HasColumnType("Text");

                b.Property<Guid>("EventId")
                    .HasColumnType("Uuid");

                b.Property<string>("MetaData")
                    .IsRequired()
                    .HasColumnType("Varchar");

                b.Property<Guid>("StreamId")
                    .HasColumnType("Uuid");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("Varchar");

                b.Property<int>("Version")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.HasIndex("EventId")
                    .IsUnique();

                b.HasIndex("StreamId");

                b.ToTable("Streams");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Team", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                b.Property<DateOnly>("Founded")
                    .HasColumnType("date");

                b.Property<long?>("GameId")
                    .HasColumnType("bigint");

                b.Property<bool>("IsActive")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(true);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("Varchar");

                b.Property<Guid>("TeamId")
                    .HasColumnType("Uuid");

                b.HasKey("Id");

                b.HasIndex("GameId");

                b.ToTable("Teams");
            });

        modelBuilder.Entity("ArenaTeam", b =>
            {
                b.HasOne("BasketBallStats.Infrastructure.Entities.Arena", null)
                    .WithMany()
                    .HasForeignKey("ArenasId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("BasketBallStats.Infrastructure.Entities.Team", null)
                    .WithMany()
                    .HasForeignKey("TeamsId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Player", b =>
            {
                b.HasOne("BasketBallStats.Infrastructure.Entities.Team", "Team")
                    .WithMany("Players")
                    .HasForeignKey("TeamId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Team");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Team", b =>
            {
                b.HasOne("BasketBallStats.Infrastructure.Entities.Game", "Game")
                    .WithMany("Teams")
                    .HasForeignKey("GameId");

                b.Navigation("Game");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Game", b =>
            {
                b.Navigation("Teams");
            });

        modelBuilder.Entity("BasketBallStats.Infrastructure.Entities.Team", b =>
            {
                b.Navigation("Players");
            });
#pragma warning restore 612, 618
    }
}
